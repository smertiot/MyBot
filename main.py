import telebot
from telebot import types
import json

API_TOKEN = '7925423997:AAHkMFZ4WnZfayI4oyu4Uwd5IN_Lt5lLyFI'
bot = telebot.TeleBot(API_TOKEN)

CHANNEL_FILE = 'channels.json'
user_states = {}

STATE_IDLE = "idle"
STATE_ADDING = "adding"
STATE_BROADCASTING = "broadcasting"

user_prefs = {}

def get_user_prefs(user_id):
    if user_id not in user_prefs:
        user_prefs[user_id] = {
            "show_id": True,
            "show_forward_from": True
        }
    return user_prefs[user_id]

def load_channels():
    try:
        with open(CHANNEL_FILE, 'r') as f:
            return json.load(f)
    except:
        return []

def save_channels(channels):
    with open(CHANNEL_FILE, 'w') as f:
        json.dump(channels, f)

def add_channel(name):
    name = name.strip()
    if not name.startswith("@"):
        return False

    channels = load_channels()
    if not any(ch['name'] == name for ch in channels):
        channels.append({"name": name, "enabled": True})
        save_channels(channels)
        return True
    return False

def toggle_channel(name):
    channels = load_channels()
    for ch in channels:
        if ch['name'] == name:
            ch['enabled'] = not ch['enabled']
            break
    save_channels(channels)

def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"), types.KeyboardButton("‚õî –°—Ç–æ–ø"))
    kb.row(types.KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª–∏"), types.KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞–Ω–∞–ª–∏"))
    kb.row(types.KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"))
    return kb

def get_settings_keyboard(user_id):
    prefs = get_user_prefs(user_id)
    show_id = "‚úÖ" if prefs["show_id"] else "‚ùå"
    show_forward = "‚úÖ" if prefs["show_forward_from"] else "‚ùå"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton(f"{show_id} –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"))
    kb.row(types.KeyboardButton(f"{show_forward} –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ –ø–µ—Ä–µ—Å–∏–ª–∫–∏"))
    kb.row(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

@bot.message_handler(commands=['start'])
def start_cmd(message):
    user_states[message.chat.id] = STATE_IDLE
    get_user_prefs(message.chat.id)
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é! –ö–µ—Ä—É–π —Ä–æ–∑—Å–∏–ª–∫–æ—é –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ:", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª–∏")
def add_channels(message):
    user_states[message.chat.id] = STATE_ADDING
    bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤:\n@–∫–∞–Ω–∞–ª\n@–∫–∞–Ω–∞–ª\n@–∫–∞–Ω–∞–ª")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id) == STATE_ADDING)
def handle_channel_input(message):
    lines = message.text.splitlines()
    added = []
    for line in lines:
        if add_channel(line.strip()):
            added.append(line.strip())

    user_states[message.chat.id] = STATE_IDLE
    if added:
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–¥–∞–Ω–æ –∫–∞–Ω–∞–ª–∏:\n" + "\n".join(added), reply_markup=get_main_keyboard())
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù—ñ—á–æ–≥–æ –Ω–µ –¥–æ–¥–∞–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –∫–∞–Ω–∞–ª–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å –∞–±–æ –º–∞—é—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda m: m.text == "üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞–Ω–∞–ª–∏")
def show_channels(message):
    channels = load_channels()
    if not channels:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    kb = types.InlineKeyboardMarkup()
    for ch in channels:
        status = "üü¢" if ch['enabled'] else "üî¥"
        kb.add(types.InlineKeyboardButton(f"{status} {ch['name']}", callback_data=f"toggle:{ch['name']}"))

    bot.send_message(message.chat.id, "–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–∞–Ω–∞–ª, —â–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏:", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith(("delete:", "toggle:")))
def handle_channel_callback(call):
    action, ch_name = call.data.split(":", 1)
    channels = load_channels()

    if action == "delete":
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–∞–Ω–∞–ª
        channels = [ch for ch in channels if ch['name'] != ch_name]
    elif action == "toggle":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ —Å—Ç–∞–Ω –∫–∞–Ω–∞–ª—É
        for ch in channels:
            if ch['name'] == ch_name:
                ch['enabled'] = not ch['enabled']
                break

    save_channels(channels)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    kb = types.InlineKeyboardMarkup(row_width=2)
    for ch in channels:
        status = "üü¢" if ch['enabled'] else "üî¥"
        kb.add(
            types.InlineKeyboardButton(f"{status} {ch['name']}", callback_data=f"toggle:{ch['name']}"),
            types.InlineKeyboardButton("‚ùå", callback_data=f"delete:{ch['name']}")
        )

    try:
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=kb)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª—ñ–≤: {e}")

@bot.message_handler(func=lambda m: m.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")
def start_broadcast(message):
    user_states[message.chat.id] = STATE_BROADCASTING
    bot.send_message(message.chat.id, "–†–µ–∂–∏–º —Ä–æ–∑—Å–∏–ª–∫–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ù–∞–¥—Å–∏–ª–∞–π –±—É–¥—å-—è–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda m: m.text == "‚õî –°—Ç–æ–ø")
def stop_broadcast(message):
    if user_states.get(message.chat.id) == STATE_BROADCASTING:
        user_states[message.chat.id] = STATE_IDLE
        bot.send_message(message.chat.id, "–†–æ–∑—Å–∏–ª–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
    else:
        bot.send_message(message.chat.id, "–†–æ–∑—Å–∏–ª–∫–∞ –Ω–µ –±—É–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—é.")

@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
def settings_menu(message):
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_settings_keyboard(message.chat.id))

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_main(message):
    bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda m: "ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å" in m.text)
def toggle_show_id(message):
    prefs = get_user_prefs(message.chat.id)
    prefs["show_id"] = not prefs["show_id"]
    bot.send_message(message.chat.id, f"–ü–æ–∫–∞–∑ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if prefs['show_id'] else '–≤–∏–º–∫–Ω–µ–Ω–æ'}", reply_markup=get_settings_keyboard(message.chat.id))

@bot.message_handler(func=lambda m: "–¥–∂–µ—Ä–µ–ª–æ –ø–µ—Ä–µ—Å–∏–ª–∫–∏" in m.text)
def toggle_show_forward(message):
    prefs = get_user_prefs(message.chat.id)
    prefs["show_forward_from"] = not prefs["show_forward_from"]
    bot.send_message(message.chat.id, f"–ü–æ–∫–∞–∑ –¥–∂–µ—Ä–µ–ª–∞ –ø–µ—Ä–µ—Å–∏–ª–∫–∏ {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if prefs['show_forward_from'] else '–≤–∏–º–∫–Ω–µ–Ω–æ'}", reply_markup=get_settings_keyboard(message.chat.id))

@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'audio', 'voice'])
def handle_messages(message):
    state = user_states.get(message.chat.id, STATE_IDLE)

    if state == STATE_BROADCASTING:
        prefs = get_user_prefs(message.chat.id)
        channels = [ch for ch in load_channels() if ch.get("enabled", True)]
        success, failed = 0, 0

        original_sender = None
        if prefs["show_forward_from"]:
            if message.forward_from:
                original_sender = f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {message.forward_from.first_name or ''} {message.forward_from.last_name or ''} (@{message.forward_from.username or '–Ω–µ–º–∞—î'})"
            elif message.forward_from_chat:
                chat_username = message.forward_from_chat.username
                chat_title = message.forward_from_chat.title or "–ö–∞–Ω–∞–ª"
                if chat_username:
                    link_to_channel = f"https://t.me/{chat_username}"
                    original_sender = f'‚ÑπÔ∏è –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∑ –∫–∞–Ω–∞–ª—É: <a href="{link_to_channel}">{chat_title}</a>'
                else:
                    original_sender = f"‚ÑπÔ∏è –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∑ –∫–∞–Ω–∞–ª—É: {chat_title}"

        for ch in channels:
            try:
                sent_msg = None
                text_note = f"\n\n{original_sender}" if original_sender else ""
                parse_mode = 'HTML' if original_sender else None

                if message.text:
                    sent_msg = bot.send_message(chat_id=ch['name'], text=message.text + text_note, parse_mode=parse_mode)
                elif message.photo:
                    caption = (message.caption or "") + text_note
                    sent_msg = bot.send_photo(chat_id=ch['name'], photo=message.photo[-1].file_id, caption=caption, parse_mode=parse_mode)
                elif message.video:
                    caption = (message.caption or "") + text_note
                    sent_msg = bot.send_video(chat_id=ch['name'], video=message.video.file_id, caption=caption, parse_mode=parse_mode)
                elif message.document:
                    caption = (message.caption or "") + text_note
                    sent_msg = bot.send_document(chat_id=ch['name'], document=message.document.file_id, caption=caption, parse_mode=parse_mode)
                elif message.audio:
                    caption = (message.caption or "") + text_note
                    sent_msg = bot.send_audio(chat_id=ch['name'], audio=message.audio.file_id, caption=caption, parse_mode=parse_mode)
                elif message.voice:
                    sent_msg = bot.send_voice(chat_id=ch['name'], voice=message.voice.file_id)
                else:
                    sent_msg = bot.copy_message(chat_id=ch['name'], from_chat_id=message.chat.id, message_id=message.message_id)

                success += 1
                if prefs["show_id"] and sent_msg:
                    bot.send_message(message.chat.id, f"üì© –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ {ch['name']} | ID: {sent_msg.message_id}")

            except Exception as e:
                failed += 1
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ {ch['name']}: {e}")

        bot.send_message(message.chat.id, f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}, ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: {failed}")

# –ó–∞–ø—É—Å–∫
bot.infinity_polling()
